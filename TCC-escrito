# frontend/backend:
Neste projeto, separamos o frontend e o backend para organizar melhor o sistema e facilitar a manutenção. O frontend cuida da interface com o usuário, enquanto o backend gerencia a lógica do sistema e a conexão com o banco de dados.

# node js -> package.json:
Para o backend, usamos Node.js, um ambiente que permite rodar JavaScript no servidor. Um arquivo essencial é o package.json, onde listamos todas as dependências e configurações do projeto. Esse arquivo facilita a instalação de pacotes e a replicação do ambiente de desenvolvimento.

# sveltekit:
No frontend, escolhemos o SvelteKit, um framework moderno baseado no Svelte. Ele permite criar interfaces de forma eficiente e reativa, além de oferecer um sistema de rotas e suporte para manipulação de dados no servidor.

# bancos de dados -> crud, transações em bancos de dados, on delete cascade
Utilizamos o MySQL como banco de dados relacional, garantindo organização e segurança dos dados. Implementamos operações de CRUD (Criar, Ler, Atualizar e Excluir) para gerenciar os registros de forma eficiente. Também utilizamos transações para garantir que processos importantes sejam concluídos corretamente, evitando erros nos dados.

# ( ver se vai precisar ON DELETE) 
Para manter a integridade dos dados, usamos ON DELETE CASCADE. Isso significa que, quando um registro principal for excluído, os registros relacionados a ele também serão removidos automaticamente, evitando dados sem referência. 

# drizzle studio
Para facilitar o gerenciamento do banco, utilizamos o Drizzle Studio. Essa ferramenta permite visualizar, modificar e executar consultas SQL de maneira simples. Além disso, o Drizzle se integra bem com TypeScript, garantindo segurança nas operações.

# TypeScript:
esqueci o que é, ver com o professor



